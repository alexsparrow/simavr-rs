/* automatically generated by rust-bindgen */

pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = ::std::os::raw::c_long;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ihex_chunk_t {
    pub baseaddr: uint32_t,
    pub data: *mut uint8_t,
    pub size: uint32_t,
}
impl ::std::clone::Clone for Struct_ihex_chunk_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ihex_chunk_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ihex_chunk_t = Struct_ihex_chunk_t;
pub type ihex_chunk_p = *mut Struct_ihex_chunk_t;
#[link(name = "simavr")]
extern "C" {
    pub fn read_hex_string(src: *const ::std::os::raw::c_char,
                           buffer: *mut uint8_t,
                           maxlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn read_ihex_chunks(fname: *const ::std::os::raw::c_char,
                            chunks: *mut ihex_chunk_p)
     -> ::std::os::raw::c_int;
    pub fn free_ihex_chunks(chunks: ihex_chunk_p);
    pub fn read_ihex_file(fname: *const ::std::os::raw::c_char,
                          dsize: *mut uint32_t, start: *mut uint32_t)
     -> *mut uint8_t;
    pub fn hdump(w: *const ::std::os::raw::c_char, b: *mut uint8_t,
                 l: size_t);
}

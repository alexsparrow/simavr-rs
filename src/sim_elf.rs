use sim_avr::{Struct_avr_t, avr_t, avr_symbol_t};
use stdint::*;

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_elf_firmware_t {
    pub mmcu: [::std::os::raw::c_char; 64usize],
    pub frequency: uint32_t,
    pub vcc: uint32_t,
    pub avcc: uint32_t,
    pub aref: uint32_t,
    pub tracename: [::std::os::raw::c_char; 128usize],
    pub traceperiod: uint32_t,
    pub tracecount: ::std::os::raw::c_int,
    pub trace: [Struct_Unnamed1; 32usize],
    pub external_state: [Struct_Unnamed2; 8usize],
    pub command_register_addr: uint16_t,
    pub console_register_addr: uint16_t,
    pub flashbase: uint32_t,
    pub flash: *mut uint8_t,
    pub flashsize: uint32_t,
    pub datasize: uint32_t,
    pub bsssize: uint32_t,
    pub eeprom: *mut uint8_t,
    pub eesize: uint32_t,
    pub symbol: *mut *mut avr_symbol_t,
    pub symbolcount: uint32_t,
}
impl ::std::clone::Clone for Struct_elf_firmware_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_elf_firmware_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub mask: uint8_t,
    pub addr: uint16_t,
    pub name: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub port: ::std::os::raw::c_char,
    pub mask: uint8_t,
    pub value: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type elf_firmware_t = Struct_elf_firmware_t;
#[link(name = "simavr")]
extern "C" {
    pub fn elf_read_firmware(file: *const ::std::os::raw::c_char,
                             firmware: *mut elf_firmware_t)
     -> ::std::os::raw::c_int;
    pub fn avr_load_firmware(avr: *mut avr_t, firmware: *mut elf_firmware_t);
}
